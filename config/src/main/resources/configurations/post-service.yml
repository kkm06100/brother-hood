server:
  port: 8082
spring:
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:1}
    elasticsearch:
      repositories:
        enabled: true
  elasticsearch:
    uris: ${ELASTIC_URI:localhost:9200}
    username: ${ELASTIC_USERNAME:}
    password: ${ELASTIC_PASSWORD:}
  datasource:
    url: jdbc:postgresql://${DB_URL:localhost}:${DB_PORT:15432}/${DB_NAME:mydb}
    username: ${DB_USERNAME:myuser}
    password: ${DB_PASSWORD:mypass}
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    show_sql: ${JPA_SHOW_SQL:true}
    open-in-view: ${JPA_OPEN_IN_VIEW:false}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${KAFKA_GROUP_ID:post-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  jackson:
    serialization:
      write-dates-as-timestamps: false

grpc:
  server:
    security:
      enabled: false
    port: ${GRPC_PORT:9091}
  client:
    auth-service:
      address: ${GRPC_AUTH_ADDRESS:static://localhost:9090}
      negotiationType: ${GRPC_AUTH_NEGOTIATION:plaintext}
jwt:
  secret: ${JWT_SECRET_KEY:Vh1wv1fy8OrEhxLnpy4ui5oyiu4i9t8uy898589yihbi9uy48fdsduw7223ufo9y9yafG7wH7J}
  access-token-expiration: ${JWT_ACCESS_EXPIRATION:18000000}
  refresh-token-expiration: ${JWT_REFRESH_EXPIRATION:1209600}
